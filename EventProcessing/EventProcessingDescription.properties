In general there are two kinds of Programming models are there 
1)Synchronous/linear programming model
2)Asynchronous/non-linear programming mode
-->every language will support this lnear programming model means sequence 
   wise execution will be there for eg:-
   public void m1(){
   //line 1
   //line 2
   //line 3
   
   //line 4
   //line 5
   ..
   //line 99
   //line 100
   }
   Here if you observe line 1,line2,line3 are will execute sequence 
   bcz to execute line 3 it required inputs from line 2 and line 1 but 
   line 5 to line 10 are indipendent of rest of the lines in an application
   in that senario Threading concept comes into picture
   so this thought comes to java people and they provided Threads concept to 
   resolve this issues
   For this java provided some apis so if you implement this so and so tasks
   will perform independently means asynchronously
   1)Threads API
   2)Observer API oldest API in java there from Starting from java
   -->Threads are used to perform multi threading issues.With this also we will be 
   facing some issues bcz If i want to change interface from one to 
   another to it looks like Thightly coupled.to avoid this problem they come up
   with another api called Observer
   Here they will not refere to any direct class reference and 
   interface reference are we are talking through channels(Listeners)
   -->How these channels wil coomunicate means
   our classes genrally want to perform some events on another class objects
   but we should not talks with the other class objects or interface references to do
   this actions for this we have to maintain one event object this will be taken care
   of the events we want to perform
   And the action part will be taken care by Handler means
   if we have class A and class B
   class A want to perform some event means acessing m1() method from class b with
   out having the object of class B
    
    
